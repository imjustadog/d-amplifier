// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/23/2016 23:36:46"
                                                                                
// Verilog Test Bench template for design : verilog_yunfang
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module verilog_yunfang_vlg_tst();
// constants                                           
// general purpose registers
// test vector input registers
reg clk;
wire rst_n;
// wires                                               
wire pwm1;
wire pwm2;

reg[9:0] adc_q;
reg[9:0] adc_i;
wire adc_oc;
wire adc_iq;
wire adc_clk;
wire locked;

// assign statements (if any)                          
verilog_yunfang i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.locked(locked),
	.pwm1(pwm1),
	.pwm2(pwm2),
	.adc_q(adc_q),
	.adc_i(adc_i),
	.adc_oc(adc_oc),
	.adc_iq(adc_iq),
	.adc_clk(adc_clk)
);
initial                                                
begin                                                  
#2000000 $stop;
end

initial
begin
clk=0;
forever #10 clk=~clk; 
end

always @(posedge clk or negedge rst_n)
begin
      if(!rst_n)
			begin 
				adc_q <= 0;
				adc_i <= 512;
			end
		else
		   begin
			   adc_q <= adc_q + 1;
				adc_i <= adc_i + 1;
				if(adc_i < 1000) 
					adc_i <= adc_i + 1;
				else
					adc_i <= 512;
			end   
end
                                                
endmodule

